1. d (32 bytes, true randomness).
2. Expand with G = SHA3-512 to get two seeds: ρ 32 bytes(for the public matrix) and σ 32 bytes(for noise).
3. use SHAKE128 (for rho → A with rejection) and SHAKE-256 (for sigma/r → CBD)

Load pk from a file/host
- Generate keys on a PC using any reference implementation (PQClean, libOQS, or the Kyber reference code).
- Save the public key (pk) bytes to a file (e.g., pk.bin).
- Send pk.bin to FPGA/SoC over UART/AXI-DMA/JTAG/etc.
- Inside the design, parse pk → (rho, t) and store them in BRAM.
- Run your encryption/encaps datapath using that pk.